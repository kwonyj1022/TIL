/* 07 함수 */

/* 07-1 함수란 */
    /*
    함수 : 어떤 목적을 가지고 작성한 코드를 모아 둔 블록문 => 재사용, 유지 보수 간편
    */

/* 07-2 함수를 정의하는 방법 */
    /*
    함수 정의 방법 1 : 함수 선언문 사용
    함수 정의 방법 2 : 함수 표현식 사용
    함수 정의 방법 3 : 화살표 함수 사용

/* 07-2-1 함수 선언문으로 함수 정의하기 */
    /*
    함수 선언문 : function 키워드로 함수를 정의하는 방법
                    function 키워드 다음에 식별자와 소괄호를 붙임
    */
    // 함수 선언문으로 3단을 출력하는 함수 gugudan 정의
    function gugudan(){
        for(let i = 1; i <= 9; i++){
            console.log(`3 * ${i} = ${3 * i}`);
        }
    }
    // 함수 호출
    gugudan();

/* 07-2-2 함수 표현식으로 함수 정의하기 */
    /*
    함수 표현식 : 함수는 객체에서 파생된 자료형이고 자료형은 변수에 할당할 수 있음을 이용한 함수 정의 방법
        - 함수 표현식으로 함수를 정의한 후에는 블록문({})에 세미콜론(;) 붙임
        - 네이밍 함수 : 함수에 식별자가 있는 함수
        - 익명 함수 : 함수에 식별자가 없는 함수
        - 함수 표현식으로 함수를 정의할 때는 const 키워드 주로 사용 (권장)
            (∵ 함수는 일관된 목적을 가진 코드 집합이라서 재정의해서도, 재할당해서도 안 되는 경우가 많기 때문)
        - 함수 표현식으로 함수를 정의할 때는 네이밍 함수로 정의하는 것이 좋고, 네이밍 함수의 식별자와 변수명을 똑가이 만드는 것이 좋음
    */
    // gugudan() 함수를 함수 표현식으로 바꾸기
    const gugudan1 = function gugudan1(){
        for (let i = 1; i <= 9; i++){
            console.log(`3 * ${i} = ${3 * i}`);
        }
    };
    gugudan1();  // 함수 호출
    // 함수 선언문과는 다르게 function 키워드 다음에 오는 식별자로 함수를 호출하지 않고, 할당한 변수명으로 호출
    const gugudan11 = function name(){
        for (let i = 1; i <= 9; i++){
            console.log(`3 * ${i} = ${3 * i}`);
        }
    }
    // name();  // 에러 발생 (∵ 함수 표현식은 함수 식별자가 아니라 할당한 변수명으로 함수 호출)
    // 따라서 익명 함수여도 함수 호출에 문제 없음
    const gugudan2 = function(){
        for (let i = 1; i <= 9; i++){
            console.log(`3 * ${i} = ${3 * i}`);
        }
    };
    gugudan2();

/* 07-2-3 화살표 함수로 함수 정의하기 */
    /*
    화살표 함수는 익명 함수로만 정의할 수 있기에 함수 표현식을 사용해야 함
    () => {}; 의 형식으로 되어 있음
    */
    // 구구단 함수를 화살표 함수로 정의하기
    const gugudan3 = () => {
        for (let i = 1; i <= 9; i++){
            console.log(`3 * ${i} = ${3 * i}`);
        }
    };
    gugudan3();